version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: quizgen-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-enayet}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/db/00-create-schemas.sql:/docker-entrypoint-initdb.d/00-create-schemas.sql:ro
      - ./docker/db/05-set-search_path.sql:/docker-entrypoint-initdb.d/05-set-search_path.sql:ro
      - ./db/schema.sql:/docker-entrypoint-initdb.d/21-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-enayet}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: quizgen-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: ./apps/api
      dockerfile: ../../docker/api/Dockerfile
    container_name: quizgen-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      NODE_ENV: development
      PORT: ${API_PORT:-4000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-enayet}?schema=quiz_gen
      SHADOW_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-enayet}?schema=quiz_gen_shadow
      REDIS_URL: redis://redis:6379
    ports:
      - "${API_PORT:-4000}:4000"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    restart: unless-stopped

  worker:
    build:
      context: ./apps/api
      dockerfile: ../../docker/worker/Dockerfile
    container_name: quizgen-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-enayet}?schema=quiz_gen
      SHADOW_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-enayet}?schema=quiz_gen_shadow
      REDIS_URL: redis://redis:6379
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: ["npm", "run", "worker"]
    restart: unless-stopped

  web:
    build:
      context: ./apps/web
      dockerfile: ../../docker/web/Dockerfile
    container_name: quizgen-web
    depends_on:
      - api
    env_file:
      - .env
    environment:
      NODE_ENV: development
      PORT: 3000
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8080/api}
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: quizgen-nginx
    depends_on:
      - web
      - api
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:

